/**
 * ========================================
 * ACTIVIDAD 2: COMPONENTE, ESTRUCTURA Y RUTA
 * ========================================
 * 
 * Esta actividad demuestra conceptos avanzados de React:
 * 1. Context API para manejo de estado global (tema claro/oscuro)
 * 2. Rutas protegidas con autenticaci√≥n simulada
 * 3. Componentes reutilizables y hooks personalizados
 * 
 * Objetivo: Aprender a manejar estado global y control de acceso en React.
 */

// Importaciones necesarias
import React, { useState, createContext, useContext } from 'react';  // Hooks de React
import { Link, Routes, Route, Navigate } from 'react-router-dom';    // Navegaci√≥n y rutas

// ========================================
// CONTEXT API PARA MANEJO DE TEMA
// ========================================

/**
 * CREACI√ìN DEL CONTEXTO
 * 
 * createContext() crea un objeto de contexto que permite compartir datos
 * entre componentes sin necesidad de pasar props manualmente (evita "prop drilling")
 */
const ThemeContext = createContext();

/**
 * HOOK PERSONALIZADO: useTheme
 * 
 * Este hook personalizado encapsula la l√≥gica de acceso al contexto del tema.
 * Proporciona una interfaz limpia para consumir el contexto y valida que
 * se est√© usando dentro del Provider correspondiente.
 */
const useTheme = () => {
  const context = useContext(ThemeContext);
  
  // Validaci√≥n de seguridad: asegura que el hook se use dentro del Provider
  if (!context) {
    throw new Error('useTheme debe ser usado dentro de un ThemeProvider');
  }
  
  return context;
};

/**
 * COMPONENTE: ThemeToggle
 * 
 * Componente reutilizable que permite cambiar entre tema claro y oscuro.
 * Utiliza el hook personalizado useTheme para acceder al estado del tema.
 */
const ThemeToggle = () => {
  // Obtenemos el tema actual y la funci√≥n para cambiarlo desde el contexto
  const { theme, toggleTheme } = useTheme();
  
  return (
    <div className="d-flex align-items-center gap-3">
      {/* Chip que muestra el tema actual */}
      <span className="accent-chip">Tema: {theme === 'light' ? 'Claro' : 'Oscuro'}</span>
      
      {/* Bot√≥n para alternar entre temas */}
      <button 
        className="btn-md"
        onClick={toggleTheme}
      >
        {theme === 'light' ? 'üåô Oscuro' : '‚òÄÔ∏è Claro'}
      </button>
    </div>
  );
};

/**
 * COMPONENTE: LoginForm
 * 
 * Formulario de login simulado que demuestra:
 * - Manejo de estado local con useState
 * - Control de formularios en React
 * - Validaci√≥n b√°sica de credenciales
 * - Comunicaci√≥n con componente padre mediante props
 */
const LoginForm = ({ onLogin }) => {
  // ========================================
  // ESTADO LOCAL DEL COMPONENTE
  // ========================================
  
  // Estado para las credenciales del usuario
  const [credentials, setCredentials] = useState({ 
    username: '', 
    password: '' 
  });
  
  // Estado para mostrar mensajes de feedback al usuario
  const [message, setMessage] = useState('');

  // ========================================
  // MANEJO DE EVENTOS
  // ========================================
  
  /**
   * FUNCI√ìN: handleSubmit
   * 
   * Maneja el env√≠o del formulario de login.
   * Valida las credenciales y notifica el resultado al componente padre.
   */
  const handleSubmit = (e) => {
    e.preventDefault(); // Previene el comportamiento por defecto del formulario
    
    // Validaci√≥n simple: admin / 123
    if (credentials.username === 'admin' && credentials.password === '123') {
      onLogin(true);  // Notifica al padre que el login fue exitoso
      setMessage('¬°Login exitoso!');
    } else {
      setMessage('Credenciales incorrectas. Usa: admin / 123');
    }
  };

  // ========================================
  // RENDERIZADO DEL FORMULARIO
  // ========================================
  
  return (
    <div className="md-section">
      <h5 className="mb-3">Iniciar Sesi√≥n</h5>
      
      {/* Formulario con manejo de eventos */}
      <form onSubmit={handleSubmit}>
        {/* Campo de usuario */}
        <div className="mb-3">
          <label htmlFor="username" className="form-label">Usuario</label>
          <input
            type="text"
            className="form-control"
            id="username"
            value={credentials.username}
            onChange={(e) => setCredentials({...credentials, username: e.target.value})}
            placeholder="admin"
          />
        </div>
        
        {/* Campo de contrase√±a */}
        <div className="mb-3">
          <label htmlFor="password" className="form-label">Contrase√±a</label>
          <input
            type="password"
            className="form-control"
            id="password"
            value={credentials.password}
            onChange={(e) => setCredentials({...credentials, password: e.target.value})}
            placeholder="123"
          />
        </div>
        
        {/* Bot√≥n de env√≠o */}
        <button type="submit" className="btn-md">Iniciar Sesi√≥n</button>
      </form>
      
      {/* Mensaje de feedback */}
      {message && (
        <div className="md-section mt-3">
          {message}
        </div>
      )}
      
      {/* Informaci√≥n de ayuda */}
      <div className="mt-2">
        <small className="md-muted">
          <strong>Credenciales:</strong> admin / 123
        </small>
      </div>
    </div>
  );
};

/**
 * COMPONENTE: ProtectedContent
 * 
 * Componente que solo es visible para usuarios autenticados.
 * Demuestra c√≥mo acceder al contexto del tema desde cualquier componente.
 */
const ProtectedContent = () => {
  // Accedemos al tema actual desde el contexto
  const { theme } = useTheme();
  
  return (
    <div className="md-section">
      <h5 className="mb-2">üéâ Contenido Protegido</h5>
      <p className="mb-0">Este contenido solo es visible para usuarios autenticados.</p>
      <div className="mt-2">
        <span className="accent-chip">Tema actual: {theme}</span>
      </div>
    </div>
  );
};

/**
 * COMPONENTE: ProtectedRoute
 * 
 * Componente de orden superior (HOC) que protege rutas.
 * Verifica si el usuario est√° autenticado y:
 * - Si est√° autenticado: renderiza el contenido protegido
 * - Si no est√° autenticado: redirige al login
 */
const ProtectedRoute = ({ children, isAuthenticated }) => {
  return isAuthenticated ? children : <Navigate to="/actividad2/login" replace />;
};

/**
 * ========================================
 * COMPONENTE PRINCIPAL: Actividad2
 * ========================================
 * 
 * Este es el componente principal que orquesta toda la actividad 2.
 * Demuestra el uso del Context API como Provider y maneja el estado
 * de autenticaci√≥n para las rutas protegidas.
 */
const Actividad2 = () => {
  // ========================================
  // ESTADO DEL COMPONENTE PRINCIPAL
  // ========================================
  
  // Estado para el tema actual (light/dark)
  const [theme, setTheme] = useState('light');
  
  // Estado para controlar si el usuario est√° autenticado
  const [isAuthenticated, setIsAuthenticated] = useState(false);
  
  // Estados para controlar la visibilidad del c√≥digo de ejemplo
  const [showCodeA, setShowCodeA] = useState(false);
  const [showCodeB, setShowCodeB] = useState(false);

  // ========================================
  // FUNCIONES DE MANEJO DE ESTADO
  // ========================================
  
  /**
   * FUNCI√ìN: toggleTheme
   * 
   * Alterna entre tema claro y oscuro.
   * Usa la forma funcional de setState para garantizar el estado m√°s reciente.
   */
  const toggleTheme = () => {
    setTheme(prevTheme => prevTheme === 'light' ? 'dark' : 'light');
  };

  /**
   * FUNCI√ìN: handleLogin
   * 
   * Maneja el resultado del login desde el componente LoginForm.
   * Recibe un booleano que indica si el login fue exitoso.
   */
  const handleLogin = (success) => {
    setIsAuthenticated(success);
  };

  /**
   * FUNCI√ìN: handleLogout
   * 
   * Cierra la sesi√≥n del usuario, revirtiendo el estado de autenticaci√≥n.
   */
  const handleLogout = () => {
    setIsAuthenticated(false);
  };

  // ========================================
  // RENDERIZADO DEL COMPONENTE
  // ========================================
  
  return (
    // Provider del Context API que envuelve toda la aplicaci√≥n
    // Proporciona el tema y la funci√≥n toggleTheme a todos los componentes hijos
    <ThemeContext.Provider value={{ theme, toggleTheme }}>
      <div className="activity activity--a2 fade-in">
        {/* 
          ========================================
          HEADER DE LA ACTIVIDAD
          ========================================
          Contiene el t√≠tulo, descripci√≥n y chip identificativo
        */}
        <div className="activity-header">
          <div className="d-flex align-items-center justify-content-between">
            <div>
              <h1 className="display-4 mb-1">Actividad 2: Componente, Estructura y Ruta</h1>
              <p className="lead md-muted mb-0">Tema claro/oscuro y rutas protegidas</p>
            </div>
            <span className="accent-chip">A2</span>
          </div>
        </div>

        <div className="activity-content">
          {/* 
            ========================================
            PROPUESTA A: COMPONENTE DE TEMA
            ========================================
            Demuestra el uso del Context API para manejo de estado global
          */}
          <div className="md-section">
            <h4 className="h5 mb-2">Propuesta A: Componente de Tema</h4>
            <p className="mb-3">
              Crear un componente que permita cambiar el tema de una aplicaci√≥n (claro/oscuro).
              Usa <code>useState</code> para manejar el estado.
            </p>

            {/* Demo interactivo del cambio de tema */}
            <div className="mb-3">
              <ThemeToggle />
            </div>
            
            {/* Vista previa que cambia seg√∫n el tema */}
            <div className={`p-3 rounded ${theme === 'dark' ? 'bg-dark text-white' : 'bg-light'}`}>
              <h6 className="mb-1">Vista previa</h6>
              <p className="mb-0">Este bloque cambia con el tema seleccionado.</p>
            </div>

            {/* Bot√≥n para mostrar/ocultar c√≥digo de la Propuesta A */}
            <div className="mt-3">
              <button className="btn-md" onClick={() => setShowCodeA(!showCodeA)}>
                {showCodeA ? 'Ocultar' : 'Ver'} C√≥digo
              </button>
              {showCodeA && (
                <div className="code-example mt-3">
                  <pre className="mb-0">
{`// Hook de tema con Context
const [theme, setTheme] = useState('light');
const toggleTheme = () => setTheme(t => t === 'light' ? 'dark' : 'light');`}
                  </pre>
                </div>
              )}
            </div>
          </div>

          {/* 
            ========================================
            PROPUESTA B: RUTAS PROTEGIDAS
            ========================================
            Demuestra c√≥mo implementar autenticaci√≥n y rutas protegidas
          */}
          <div className="md-section">
            <h4 className="h5 mb-2">Propuesta B: Rutas Protegidas</h4>
            <p className="mb-3">
              Crea una ruta que requiera iniciar sesi√≥n antes de acceder.
            </p>

            {/* Indicador de estado de autenticaci√≥n */}
            <div className="mb-3">
              {isAuthenticated ? (
                <div className="d-flex align-items-center gap-2">
                  <span className="accent-chip">‚úÖ Autenticado</span>
                  <button className="btn-md" onClick={handleLogout}>Cerrar sesi√≥n</button>
                </div>
              ) : (
                <span className="accent-chip">‚ö†Ô∏è No autenticado</span>
              )}
            </div>

            {/* 
              RUTAS ANIDADAS
              React Router permite definir rutas dentro de componentes.
              Estas rutas son relativas al path actual (/actividad2)
            */}
            <Routes>
              {/* Ruta de login */}
              <Route path="/login" element={<LoginForm onLogin={handleLogin} />} />
              
              {/* Ruta protegida que requiere autenticaci√≥n */}
              <Route 
                path="/protected" 
                element={
                  <ProtectedRoute isAuthenticated={isAuthenticated}>
                    <ProtectedContent />
                  </ProtectedRoute>
                } 
              />
            </Routes>

            {/* Bot√≥n de navegaci√≥n condicional */}
            <div className="mt-3">
              <Link 
                to={isAuthenticated ? "/actividad2/protected" : "/actividad2/login"}
                className="btn-md"
              >
                {isAuthenticated ? 'Ver Contenido' : 'Ir a Login'}
              </Link>
            </div>

            {/* Bot√≥n para mostrar/ocultar c√≥digo de la Propuesta B */}
            <div className="mt-3">
              <button className="btn-md" onClick={() => setShowCodeB(!showCodeB)}>
                {showCodeB ? 'Ocultar' : 'Ver'} C√≥digo
              </button>
              {showCodeB && (
                <div className="code-example mt-3">
                  <pre className="mb-0">
{`// Ruta protegida
const ProtectedRoute = ({ children, isAuthenticated }) => (
  isAuthenticated ? children : <Navigate to="/login" replace />
);`}
                  </pre>
                </div>
              )}
            </div>
          </div>

          {/* 
            ========================================
            NAVEGACI√ìN
            ========================================
            Botones para navegar entre actividades
          */}
          <div className="d-flex gap-2">
            <Link to="/" className="btn-md">‚Üê Inicio</Link>
            <Link to="/actividad1" className="btn-md">‚Üê Anterior</Link>
            <Link to="/actividad3a" className="btn-md">Siguiente ‚Üí</Link>
          </div>
        </div>
      </div>
    </ThemeContext.Provider>
  );
};

// Exportamos el componente para que pueda ser usado en el router principal
export default Actividad2;
